{"version":3,"file":"mobx-react-intl.umd.js","sources":["../src/LocaleStore.ts","../src/MobxIntlProvider.tsx"],"sourcesContent":["import { observable } from 'mobx';\nconst _formatMessage: any = require('format-message');\n\nconst LOCALE = 'locale';\n\nexport class LocaleStore {\n    private _locale = observable.box(''); // the locale value\n    private translations: { [key: string]: { [id: string]: string } };\n\n    constructor(defaultLocale: string, translations: { [key: string]: { [id: string]: string } }) {\n        this.translations = translations;\n        if (typeof Storage !== 'undefined') {\n            const storedLocale = localStorage.getItem(LOCALE);\n            if (storedLocale && storedLocale in translations) {\n                this.value = storedLocale;\n            } else {\n                this.value = defaultLocale;\n            }\n        } else {\n            this.value = defaultLocale;\n        }\n    }\n\n    get value(): string {\n        return this._locale.get();\n    }\n\n    set value(value: string) {\n        if (typeof Storage !== 'undefined') {\n            localStorage.setItem(LOCALE, value);\n        }\n        this._locale.set(value);\n    }\n\n    get messages(): { [key: string]: string } {\n        return this.translations[this.value];\n    }\n\n    formatMessage = (id: string, values: object) => {\n        if (!(id in this.messages)) {\n            console.warn('Id not found in intl list: ' + id);\n            return id;\n        }\n        return _formatMessage(this.messages[id], values);\n    };\n}\n","import * as React from \"react\";\nimport { LocaleStore } from \"./LocaleStore\";\nimport {inject, observer} from \"mobx-react\";\nimport {IntlProvider} from \"react-intl\"\n\nconst MobxIntlProviderChild =  ({locale, children, ...props}: {locale: LocaleStore, children: any}) => {\n    const loc = locale.value;\n    const messages = locale.messages;\n    return <IntlProvider key={loc} locale={loc} messages={messages} {...props}>\n        {children}\n    </IntlProvider>\n}\n\nexport const MobxIntlProvider = inject(\"locale\")(observer(MobxIntlProviderChild));\n"],"names":["observable","React.createElement","IntlProvider","inject","observer"],"mappings":";;;;;;AACA,IAAM,cAAc,GAAQ,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAEtD,IAAM,MAAM,GAAG,QAAQ,CAAC;AAExB;IAII,qBAAY,aAAqB,EAAE,YAAyD;QAA5F,iBAYC;QAfO,YAAO,GAAGA,eAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAgCrC,kBAAa,GAAG,UAAC,EAAU,EAAE,MAAc;YACvC,IAAI,EAAE,EAAE,IAAI,KAAI,CAAC,QAAQ,CAAC,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC,CAAC;gBACjD,OAAO,EAAE,CAAC;aACb;YACD,OAAO,cAAc,CAAC,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;SACpD,CAAC;QAlCE,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAChC,IAAM,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClD,IAAI,YAAY,IAAI,YAAY,IAAI,YAAY,EAAE;gBAC9C,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;aAC7B;iBAAM;gBACH,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;aAC9B;SACJ;aAAM;YACH,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;SAC9B;KACJ;IAED,sBAAI,8BAAK;aAAT;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;SAC7B;aAED,UAAU,KAAa;YACnB,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;gBAChC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACvC;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC3B;;;OAPA;IASD,sBAAI,iCAAQ;aAAZ;YACI,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxC;;;OAAA;IASL,kBAAC;CAAA;;;;;;;;;;;;;;;;;;;;;;AC7CD,AAKA,IAAM,qBAAqB,GAAI,UAAC,EAAkE;IAAjE,IAAA,kBAAM,EAAE,sBAAQ,EAAE,0CAAQ;IACvD,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IACjC,OAAOC,oBAACC,sBAAY,aAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,IAAM,KAAK,GACpE,QAAQ,CACE,CAAA;CAClB,CAAA;AAED,AAAO,IAAM,gBAAgB,GAAGC,gBAAM,CAAC,QAAQ,CAAC,CAACC,kBAAQ,CAAC,qBAAqB,CAAC,CAAC;;;;;;;;;;;;;"}